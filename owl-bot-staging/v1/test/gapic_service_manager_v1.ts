// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as servicemanagerModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ServiceManagerClient', () => {
    it('has servicePath', () => {
        const servicePath = servicemanagerModule.v1.ServiceManagerClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = servicemanagerModule.v1.ServiceManagerClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = servicemanagerModule.v1.ServiceManagerClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new servicemanagerModule.v1.ServiceManagerClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new servicemanagerModule.v1.ServiceManagerClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.serviceManagerStub, undefined);
        await client.initialize();
        assert(client.serviceManagerStub);
    });

    it('has close method', () => {
        const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getService', () => {
        it('invokes getService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService());
            client.innerApiCalls.getService = stubSimpleCall(expectedResponse);
            const [response] = await client.getService(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService());
            client.innerApiCalls.getService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getService(
                    request,
                    (err?: Error|null, result?: protos.google.api.servicemanagement.v1.IManagedService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getService with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getService(request), expectedError);
            assert((client.innerApiCalls.getService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServiceConfig', () => {
        it('invokes getServiceConfig without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.Service());
            client.innerApiCalls.getServiceConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServiceConfig without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.Service());
            client.innerApiCalls.getServiceConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceConfig(
                    request,
                    (err?: Error|null, result?: protos.google.api.IService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServiceConfig with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceConfig(request), expectedError);
            assert((client.innerApiCalls.getServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createServiceConfig', () => {
        it('invokes createServiceConfig without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.Service());
            client.innerApiCalls.createServiceConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.createServiceConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServiceConfig without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.Service());
            client.innerApiCalls.createServiceConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createServiceConfig(
                    request,
                    (err?: Error|null, result?: protos.google.api.IService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createServiceConfig with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceConfigRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServiceConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createServiceConfig(request), expectedError);
            assert((client.innerApiCalls.createServiceConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getServiceRollout', () => {
        it('invokes getServiceRollout without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout());
            client.innerApiCalls.getServiceRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.getServiceRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getServiceRollout without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout());
            client.innerApiCalls.getServiceRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getServiceRollout(
                    request,
                    (err?: Error|null, result?: protos.google.api.servicemanagement.v1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getServiceRollout with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GetServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getServiceRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getServiceRollout(request), expectedError);
            assert((client.innerApiCalls.getServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('generateConfigReport', () => {
        it('invokes generateConfigReport without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GenerateConfigReportRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.GenerateConfigReportResponse());
            client.innerApiCalls.generateConfigReport = stubSimpleCall(expectedResponse);
            const [response] = await client.generateConfigReport(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.generateConfigReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes generateConfigReport without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GenerateConfigReportRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.api.servicemanagement.v1.GenerateConfigReportResponse());
            client.innerApiCalls.generateConfigReport = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.generateConfigReport(
                    request,
                    (err?: Error|null, result?: protos.google.api.servicemanagement.v1.IGenerateConfigReportResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.generateConfigReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes generateConfigReport with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.GenerateConfigReportRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.generateConfigReport = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.generateConfigReport(request), expectedError);
            assert((client.innerApiCalls.generateConfigReport as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createService', () => {
        it('invokes createService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createService(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.IManagedService, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.IManagedService, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createService with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createService(request), expectedError);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createService with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateServiceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateServiceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateServiceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateServiceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteService', () => {
        it('invokes deleteService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteService(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteService with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteService(request), expectedError);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteService with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteServiceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteServiceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteServiceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteServiceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeleteService', () => {
        it('invokes undeleteService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.UndeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeleteService(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.UndeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.IUndeleteServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.IUndeleteServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes undeleteService with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.UndeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeleteService(request), expectedError);
            assert((client.innerApiCalls.undeleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteService with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.UndeleteServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeleteService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.undeleteService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUndeleteServiceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeleteServiceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeleteServiceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeleteServiceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('submitConfigSource', () => {
        it('invokes submitConfigSource without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.SubmitConfigSourceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.submitConfigSource = stubLongRunningCall(expectedResponse);
            const [operation] = await client.submitConfigSource(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.submitConfigSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes submitConfigSource without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.SubmitConfigSourceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.submitConfigSource = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.submitConfigSource(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.ISubmitConfigSourceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.submitConfigSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes submitConfigSource with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.SubmitConfigSourceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.submitConfigSource = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.submitConfigSource(request), expectedError);
            assert((client.innerApiCalls.submitConfigSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes submitConfigSource with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.SubmitConfigSourceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.submitConfigSource = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.submitConfigSource(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.submitConfigSource as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSubmitConfigSourceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSubmitConfigSourceProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSubmitConfigSourceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSubmitConfigSourceProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createServiceRollout', () => {
        it('invokes createServiceRollout without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createServiceRollout = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createServiceRollout(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServiceRollout without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createServiceRollout = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createServiceRollout(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.IRollout, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.IRollout, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createServiceRollout with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServiceRollout = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createServiceRollout(request), expectedError);
            assert((client.innerApiCalls.createServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createServiceRollout with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.CreateServiceRolloutRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createServiceRollout = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createServiceRollout(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createServiceRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateServiceRolloutProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateServiceRolloutProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateServiceRolloutProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateServiceRolloutProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('enableService', () => {
        it('invokes enableService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.EnableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.enableService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.enableService(request);
            const [response] = await operation.promise();
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.EnableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.enableService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.enableService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.IEnableServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.IEnableServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.enableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes enableService with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.EnableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.enableService(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.enableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes enableService with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.EnableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.enableService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.enableService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.enableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkEnableServiceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkEnableServiceProgress(expectedResponse.name);
            assert(stub.calledOnce);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkEnableServiceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkEnableServiceProgress(''), expectedError);
            assert(stub.calledOnce);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('disableService', () => {
        it('invokes disableService without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DisableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.disableService = stubLongRunningCall(expectedResponse);
            const [operation] = await client.disableService(request);
            const [response] = await operation.promise();
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableService without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DisableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.disableService = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.disableService(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.api.servicemanagement.v1.IDisableServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.api.servicemanagement.v1.IDisableServiceResponse, protos.google.api.servicemanagement.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert(stub.calledOnce);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.disableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes disableService with call error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DisableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableService = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.disableService(request), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.disableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes disableService with LRO error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.DisableServiceRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.disableService = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.disableService(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(stub.calledOnce);
            assert((client.innerApiCalls.disableService as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDisableServiceProgress without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDisableServiceProgress(expectedResponse.name);
            assert(stub.calledOnce);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDisableServiceProgress with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            const stub = sinon.stub(client, 'warn');
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDisableServiceProgress(''), expectedError);
            assert(stub.calledOnce);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listServices', () => {
        it('invokes listServices without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
            ];
            client.innerApiCalls.listServices = stubSimpleCall(expectedResponse);
            const [response] = await client.listServices(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServices without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
            ];
            client.innerApiCalls.listServices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServices(
                    request,
                    (err?: Error|null, result?: protos.google.api.servicemanagement.v1.IManagedService[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServices with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listServices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServices(request), expectedError);
            assert((client.innerApiCalls.listServices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServicesStream without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
            ];
            client.descriptors.page.listServices.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.servicemanagement.v1.ManagedService[] = [];
                stream.on('data', (response: protos.google.api.servicemanagement.v1.ManagedService) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServices, request));
        });

        it('invokes listServicesStream with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listServices.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.servicemanagement.v1.ManagedService[] = [];
                stream.on('data', (response: protos.google.api.servicemanagement.v1.ManagedService) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServices, request));
        });

        it('uses async iteration with listServices without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.ManagedService()),
            ];
            client.descriptors.page.listServices.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.api.servicemanagement.v1.IManagedService[] = [];
            const iterable = client.listServicesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listServices with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServicesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listServices.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServicesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.api.servicemanagement.v1.IManagedService[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listServiceConfigs', () => {
        it('invokes listServiceConfigs without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
            ];
            client.innerApiCalls.listServiceConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listServiceConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceConfigs without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
            ];
            client.innerApiCalls.listServiceConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServiceConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.api.IService[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServiceConfigs with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServiceConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServiceConfigs(request), expectedError);
            assert((client.innerApiCalls.listServiceConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceConfigsStream without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
            ];
            client.descriptors.page.listServiceConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServiceConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.Service[] = [];
                stream.on('data', (response: protos.google.api.Service) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServiceConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listServiceConfigsStream with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listServiceConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServiceConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.Service[] = [];
                stream.on('data', (response: protos.google.api.Service) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServiceConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceConfigs without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
              generateSampleMessage(new protos.google.api.Service()),
            ];
            client.descriptors.page.listServiceConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.api.IService[] = [];
            const iterable = client.listServiceConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceConfigs with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceConfigsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";const expectedError = new Error('expected');
            client.descriptors.page.listServiceConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServiceConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.api.IService[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listServiceRollouts', () => {
        it('invokes listServiceRollouts without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
            ];
            client.innerApiCalls.listServiceRollouts = stubSimpleCall(expectedResponse);
            const [response] = await client.listServiceRollouts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceRollouts without error using callback', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
            ];
            client.innerApiCalls.listServiceRollouts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listServiceRollouts(
                    request,
                    (err?: Error|null, result?: protos.google.api.servicemanagement.v1.IRollout[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listServiceRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listServiceRollouts with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listServiceRollouts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listServiceRollouts(request), expectedError);
            assert((client.innerApiCalls.listServiceRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listServiceRolloutsStream without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
            ];
            client.descriptors.page.listServiceRollouts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listServiceRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.servicemanagement.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.api.servicemanagement.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listServiceRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceRollouts, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listServiceRolloutsStream with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listServiceRollouts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listServiceRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.api.servicemanagement.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.api.servicemanagement.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listServiceRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listServiceRollouts, request));
            assert.strictEqual(
                (client.descriptors.page.listServiceRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceRollouts without error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
              generateSampleMessage(new protos.google.api.servicemanagement.v1.Rollout()),
            ];
            client.descriptors.page.listServiceRollouts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.api.servicemanagement.v1.IRollout[] = [];
            const iterable = client.listServiceRolloutsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listServiceRollouts with error', async () => {
            const client = new servicemanagerModule.v1.ServiceManagerClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.api.servicemanagement.v1.ListServiceRolloutsRequest());
            request.serviceName = '';
            const expectedHeaderRequestParams = "service_name=";const expectedError = new Error('expected');
            client.descriptors.page.listServiceRollouts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listServiceRolloutsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.api.servicemanagement.v1.IRollout[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listServiceRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listServiceRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
});
